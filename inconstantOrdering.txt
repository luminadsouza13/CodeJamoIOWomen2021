Problem
We want to build a string with English alphabet uppercase letters in sorted order. However, we want the order to be sometimes strictly increasing and sometimes strictly decreasing.

The first letter of the string must be A. After that, the string must contain one or more blocks of letters. The i-th block must contain exactly Li letters. Each letter in the i-th block must be later in the alphabet than its preceding letter in the string if i is odd and earlier in the alphabet than its preceding letter if i is even. Notice that for the first letter of a block, its preceding letter exists, even though it is not in the block. Strings that follow all of these rules are called valid. There can be multiple valid strings, and we want to find the alphabetically first one.

For example, if there are 2 blocks of sizes L1=2 and L2=3, the string must have exactly 1+L1+L2=1+2+3=6 letters (the 1 is for the initial A). The strings XYZYBA, AZYCBA and AYZYBB are not valid for this case because they violate the required starting letter condition, and the ordering conditions in the first and second block, respectively. The string AYZYBA is valid. The string ABDCBA is also valid and, moreover, it is the alphabetically first valid string.

Given the sizes of the blocks, output the valid string that comes first in alphabetical order in the list of all valid strings. It can be shown that, for all inputs within the given limits, at least one valid string exists.

Input
The first line of the input gives the number of test cases, T. T test cases follow. Each test case is described with two lines. The first line of a test case contains a single integer N, the number of blocks. The second line contains N integers L1,L2,…,LN, the number of letters each block must have, in order.

Output
For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the valid string that comes first in alphabetical order. It is guaranteed that at least one valid string exists.

Limits
Time limit: 10 seconds.
Memory limit: 1 GB.
1≤T≤100.
1≤Li≤25, for all i.
Test Set 1 (Visible Verdict)

1≤N≤2.
Test Set 2 (Visible Verdict)
1≤N≤100.

---------------------------------Analysis-------------------
Analysis
Test Set 1
It is given that a valid string must start with A.

For N=1, the only block B1 should therefore start with a character greater than A. To keep building the alphabetically first valid string, we start B1 with B which is just greater than A. We keep on incrementing the character as we move right to ensure that B1 is strictly increasing. Notice that we will eventually end up with a prefix of BCDE..XYZ as B1. As Li≤25, we will never run out of characters for this.

For N=2, we construct the first block B1 using the process described for N=1. We now evaluate the possible ways to fill the strictly decreasing second block B2. We try to start B2 with the smallest possible character to get the alphabetically first string. This implies that B2 will end with the smallest character in the alphabet which is A. So, we start filling B2 from the end with A and move to the left, incrementing the character.

Let b1 be the last character in B1 and b2 be the first character in B2. If b1>b2, then we will always get a valid string as it ensures that B2 is strictly decreasing. On the other hand if b1≤b2, then the final string is invalid. For example, if L1=2 and L2=4, the resulting string from the above process will be ABCDCBA which is invalid.

To ensure that B2 is always strictly decreasing, we update b1 with the character just greater than b2. This will guarantee that the string is valid and alphabetically the first one. Again as Li≤25, we will never run out of characters while filling B2. In the above example, ABCDCBA now transforms to a valid string ABEDCBA.

Test Set 2
We generalize the above solution for N>2.

If N is even, we can divide the blocks into N/2 pairs as |L1,L2|L3,L4|...|LN−1,LN| and solve the N/2 pairs independently using the same approach as for N=2. We can do this as every such pair of blocks will end with A.

If N is odd, we solve for N−1 blocks using the above approach and for the last block LN, we treat it as the case when N=1.

The time complexity is O(L1+L2+⋯+LN) for each test case.